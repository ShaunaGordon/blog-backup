<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tutorials | Shauna Gordon]]></title>
  <link href="http://ShaunaGordon.com/blog/categories/tutorials/atom.xml" rel="self"/>
  <link href="http://ShaunaGordon.com/"/>
  <updated>2014-10-31T02:35:10+00:00</updated>
  <id>http://ShaunaGordon.com/</id>
  <author>
    <name><![CDATA[Shauna Gordon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Use Pidgin and Google Apps to Chat]]></title>
    <link href="http://ShaunaGordon.com/blog/2012/11/01/use-pidgin-and-google-apps-to-chat/"/>
    <updated>2012-11-01T00:00:00+00:00</updated>
    <id>http://ShaunaGordon.com/blog/2012/11/01/use-pidgin-and-google-apps-to-chat</id>
    <content type="html"><![CDATA[<div class='post'>
<p>Who doesn't use instant messenger of some form these days? Those of us from the days when there were as many chat programs as people probably have half a dozen accounts or more, or at least did at one point (who didn't have ICQ, MSN, AIM, <i>and</i> Yahoo?). Thank goodness for unifying applications like Pidgin/Adium, Trillian, and others.</p><p>Now that some of us old chatters have grown up and created businesses (or at least business names) of our own, we may need to add our Google Apps accounts to the mix. This is a little trickier than just adding a Gmail, or other established provider, account, but thankfully, it's not that difficult. I found, though, that start-to-finish instructions for getting set up on Pidgin were lacking, so we'll cover them here. These instructions will work for Pidgin, and should work for Adium (the Mac port of Pidgin), though one may find the settings in slightly different places, due to convention differences across the platforms. The basic information should also work for other clients, such as Tillian, though, obviously, you're on your own for finding were to enter everything.</p><!-- more --><h2>1. Server Settings</h2><p>Before you can even do anything in Pidgin, you need to first set up your domain to use the XMPP chat protocol and Google as the provider, and make sure that external chat is turned on in your Google Apps account. You can do this by going into the DNS management section of your web host.</p><p><b>2 things of note:</b> First, where and how you update your DNS information will depend entirely on your host. Since every host uses a different interface, detailing every single one is beyond the scope of this article. If you don't know how to edit your DNS listings, then you'll need to consult your host's documentation or help system.</p><p>Second, many hosting companies offer a wizard for setting up a domain to work with Google Apps. These scripts are great for getting email and whatnot associated, but they unfortunately do not include setting up for chat. You will need to set this up manually.</p><h3>Turn on Google Chat</h3><p>This should be enabled by default, but if you're not sure, or you turned it off previously, sign in to your Google Apps account with an administrative account and go into the domain management section.</p><p>On your dashboard, there should be a "Your Google apps" widget. If "Chat" does not show up in the list, then click on the "Enable more services link" and find the "Chat" service and make sure it's turned on.</p><h3>Edit Your SRV Entries</h3><p>Google has a <a href="http://support.google.com/a/bin/answer.py?hl=en&amp;answer=34143" target="_blank">nice little documentation page</a> that includes the information needed to fill in for your SRV entries. Specifically, you want to keep note of the data itself:</p><p>_xmpp-server._tcp.<b>yourdomain.com</b>. IN   SRV     5 0 5269 xmpp-server.l.google.com.<br />_xmpp-server._tcp.<b>yourdomain.com</b>. IN   SRV     20 0 5269 alt1.xmpp-server.l.google.com.<br />_xmpp-server._tcp.<b>yourdomain.com</b>. IN   SRV     20 0 5269 alt2.xmpp-server.l.google.com.<br />_xmpp-server._tcp.<b>yourdomain.com</b>. IN   SRV     20 0 5269 alt3.xmpp-server.l.google.com.<br />_xmpp-server._tcp.<b>yourdomain.com</b>. IN   SRV     20 0 5269 alt4.xmpp-server.l.google.com.</p><p>When filling out your SRV entries, replace <b>yourdomain.com</b> with the domain you want to use to connect to.</p><h2>2. Pidgin Settings</h2><p>This is where things aren't quite so straightforward. As you're probably aware, with your Gmail account (and other XMPP direct providers), you simply fill in the username and domain fields, and Pidgin happily picks up the rest of details. For your custom setup, though, there's a little more to fill in.</p><p>First, to add your account, select "XMPP" for the provider. Set the username and domain the same way you did with your Gmail account, with the username as the portion to the left of the @ symbol in your email, and the domain as the portion to the right of it.</p><p>Since you're piggybacking off of Google's servers, which have a different domain name, you need to fill in the <b>resource</b> field with <i>gmail.com/</i> (yes, include the slash).</p><p>After that, go over to the "Advanced" tab and fill in the following information:</p><p><b>Connect port:</b> 5222<br /><b>Connect server:</b> talk.google.com<br /><b>File transfer proxies:</b> proxy.jabber.org</p><p>(*Note:* I've found that Pidgin might insist on using proxy.eu.jabber.org, this doesn't seem to affect file transfers. I think the important part is that it's a jabber.org address.) </p><p>Click "Save" and you're done!</p><p>If Pidgin cannot connect, it may be due to the fact that it takes some time for DNS changes to propagate through the Internet. If you just added your SRV entries, you may need to wait a day for the changes to take full effect.</p></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(SilverStripe) Syntax Highlighter Not Working? Try This Workaround!]]></title>
    <link href="http://ShaunaGordon.com/blog/2011/01/11/silverstripe-syntax-highlighter-not/"/>
    <updated>2011-01-11T00:00:00+00:00</updated>
    <id>http://ShaunaGordon.com/blog/2011/01/11/silverstripe-syntax-highlighter-not</id>
    <content type="html"><![CDATA[<div class='post'>
<p>So, after three days of failed code and equally failed Google searches, I finally got <a href="http://alexgorbatchev.com/SyntaxHighlighter/" target="_blank">Alex Gorbatchev's SyntaxHighlighter</a> working with SilverStripe.</p><!-- more --><h2>The Problem</h2><p>SyntaxHighlighter comes with something like 30 styles, known as "brushes," for highlighting consistent with different language styles. Since I work with a number of different languages, I wanted to have them available to use, but not load them all on every page. The recent versions have an autoloader feature, which is awesome, and worked great...on my development server. My production server? Not so much. In fact, for some reason, I kept getting the error "Could not find brush for: [insert requested language here]", even though I could link to it just fine.</p><p>I didn't have the patience to figure out what was wrong (the whole "shoemaker's kids go barefoot" thing), but my guess is that it has something to do with something on Apache and rewriting (my dev server is Nginx, which I've grown to love thanks to my latest client, while the production server is Apache with a cPanel front). Instead, I decided to make a workaround.</p><h2>The Solution</h2><p>Perhaps, I'm a carpenter with only a hammer in this situation, so I see this as a nail, even if it really isn't, but I decided to solve the problem The PHP Way&trade;.</p><p>First, of course, download SyntaxHighlighter and unzip it into the root of your SilverStripe install (I just named its root folder "sh" for easy coding). Don't forget to pick up the <a title="SyntaxHL TinyMCE plugin" href="https://github.com/RichGuk/syntaxhl" target="_blank">SyntaxHL TinyMCE plugin</a> for the HTML Editor and install it (in SilverStripe 2.4.4, copy the extracted files into /sapphire/thirdparty/tinymce/plugins/), so you can have a convenient button in which to add your code.</p><p>Now, let's get down to the fun!</p><p>The first thing we need to do is add a field into the CMS so we can list what brushes we want to use when we use SyntaxHighlighter on a page, so in the model for the page type you're adding brushes to, put the following:</p><pre class="brush: php;fontsize: 100; first-line: 1; highlight: [3]; ">function getCMSfields(){<br />    $fields = parent::getCMSfields();<br />    $fields-&gt;addFieldToTab('Root.Content.Main', new TextField('Brushes'));<br /><br />    return $fields;<br />}</pre><p>If you already have the getCMSfields() function in your model, simply add the highlighted line.</p><p>Since this was more or less a quick-and-dirty solution, and I'm the only one using my CMS, all I did was add a basic text field to the bottom of my main content page, where I'd add a comma-separated list of the brushes I want to use. If you need to ensure consistency, or want to control what brushes are available to the user, you could make the text field another type of field, such as a set of checkboxes.</p><p>In the controller for the page type you want to add your brushes to, create a function to provide the array that view will use:</p><pre class="brush: php;fontsize: 100; first-line: 1; ">function Brushes() {<br />        $BrushSet = new DataObjectSet();<br />        $shBrushes = explode(',', $this-&gt;Brushes);<br /><br />        foreach ($shBrushes as $brush) {<br />            $BrushSet-&gt;push(new ArrayData(array(<br />                        'Brush' =&gt; ucwords($brush)<br />                    )));<br />        }<br /><br />        return $BrushSet;<br />    }</pre><p>The controller function simply takes the comma-separated string, creates an array, then puts it into the DataObjectSet for outputting into the view. The ucwords() call ensures that each item is capitalized, following the files' naming structure.</p><p>Now, on to the view!</p><p>First, we need to add the base files to make SyntaxHighlighter work. I've added the Django theme, since it matches my site's color scheme as of this writing (and I just like it). SyntaxHighlighter comes with a number of themes, so just load what you want after the shCore.css file for the color scheme. After that, add the core JavaScript file. I use the regular syntax for the JavaScript files so that I can add them where I want (the template syntax, by default, automatically puts them at the bottom of the document, either above the closing body tag, or above any existing script tags; I've found that this will keep some scripts from working), and put the core file in the document head. Below that is the custom control for the script tag that will load the individual brushes. Finally, the shLoad file, which applies the brushes to the tags that call for them.</p><pre class="brush: xml;fontsize: 100; first-line: 1; "><pre class="brush: xml;fontsize: 100; first-line: 1; ">&lt;% require css(sh/styles/shCore.css) %&gt;<br />&lt;% require css(sh/styles/shThemeDjango.css) %&gt;<br />&lt;script type="text/javascript" src="http://ShaunaGordon.com/sh/scripts/shCore.js"&gt;&lt;/script&gt;<br /><br />&lt;% control Brushes %&gt;<br />    &lt;% include Brush %&gt;<br />&lt;% end_control %&gt;<br /><br />&lt;script type="text/javascript" src="http://ShaunaGordon.com/sh/shLoad.js"&gt;&lt;/script&gt;</pre></pre><p>Finally, we need to create the include file for our Brush control. This is simply the following script call:</p><pre class="brush: xml;fontsize: 100; first-line: 1; ">&lt;script type="text/javascript" src="http://ShaunaGordon.com/sh/scripts/shBrush{$Brush}.js"&gt;&lt;/script&gt;</pre><p>Note the {$Brush} variable in the tag. Conveniently, the brushes are named according to a standard, with the last segment being the language the brush is for. The only caveat this means for our setup is that we have to remember the names the files use. This could be remedied by using a system that generates the options, though doing that would require going into the code again if you add new brushes (either adding to the files or adding more choices to your list). Such is the trade-off to be considered, based on your circumstances.</p><p>Don't forget to add the button to your editor, in your mysite/_config.php file, add the lines:</p><pre class="brush: php;fontsize: 100; first-line: 1; ">// SyntaxHighlighter TinyMCE Plugin<br />HtmlEditorConfig::get('cms')-&gt;enablePlugins('syntaxhl');<br />HtmlEditorConfig::get('cms')-&gt;insertButtonsAfter('charmap', 'syntaxhl');</pre><p>I added the button after the Specials Character map, since it's at the end of the formatting row, but it can really be added anywhere. You just need to know the name of the button you want to put it after.</p><h2>Conclusion</h2><p>And there you have it. A quick /dev/build and you should be up and running with syntax highlighting, The PHP Way&trade;!</p><p>The AuthoLoader is probably a better way of doing it, if you can (because it calls the brushes automatically when you request them), but this should provide a nice workaround if you find yourself in my situation and can't seem to get the AutoLoader working properly.</p></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create a 'Latest' Feed in SilverStripe with SimplePie]]></title>
    <link href="http://ShaunaGordon.com/blog/2010/03/24/create-latest-feed-in-silverstripe-with/"/>
    <updated>2010-03-24T00:00:00+00:00</updated>
    <id>http://ShaunaGordon.com/blog/2010/03/24/create-latest-feed-in-silverstripe-with</id>
    <content type="html"><![CDATA[<div class='post'>
<p>(SilverStripe version 2.3. Version 2.4 has some changes that change what needs to be done to achieve this effect. Among the changes is an updated version of SimplePie.)</p><p>One of the things that my client (and I, for that matter) wanted on  their site was a way to show a snippet from the latest post from their  blog. Since they were already using an established, external blog (in  this case, hosted on Blogger), and we wanted to avoid creating an  internal one and importing everything, we decided to see if we could  find a way to pull in part of the latest post.  As it turns out, SilverStripe has a similar feature built into it.<!-- more --> There  are a few problems, though:</p><ol><li>The feature is only available, by default, as part of the "blog"  module. Since my client's site was not a blog, that meant pulling some  code in and customizing it.</li><li>The default code will pull the entire blog. This means that we'll  need to trim it down.</li><li>Even when trimming down the number of entries it pulls and shows,  it still shows the entire blog entry. So, we need to create a function  to trim the individual post. (As a bonus, though, we end up with a  function we could use for anything that requires trimming a block of  text.)</li></ol><p>This feature is an app called <a href="http://simplepie.org/">SimplePie</a>. Technically speaking,  the version SilverStripe installs with is outdated, but it still works  for our purposes. The only thing you need, then, is to make sure  syndication is turned on, and the address of the feed (the actual RSS  feed address, not the blog address).  <strong>Note:</strong> if you try to access the feed in your browser to get the  feed address and all you get is the bookmark dialog, without a feed  preview page, then make sure your browser is set to preview feeds. In  Firefox, this can be found in Preferences -&gt; Applications as "Web  Feed".  The first thing we need to do is write the controller code. <a href="http://www.silverstripe.org/general-questions/show/269733#post269733">Mo,  in the SilverStripe forums</a> kindly supplied the original portion of  the code, which he pulled from the blog module. Don't forget to change  the first parameter in the SimplePie function call to your feed URL.&nbsp;</p><pre class="brush: php;fontsize: 100; first-line: 1; ">function LatestNews() {<br />$output = new DataObjectSet();<br />include_once(Director::getAbsFile(SAPPHIRE_DIR . '/thirdparty/simplepie/SimplePie.php'));<br />$t1 = microtime(true);<br />$feed = new SimplePie('http://www.silverstripe.org/blog/rss', TEMP_FOLDER);<br />$feed-&gt;init();<br />if($items = $feed-&gt;get_items(0, 1)) {<br />foreach($items as $item) {<br /><br />// Cast the Date<br />$date = new Date('Date');<br />$date-&gt;setValue($item-&gt;get_date());<br /><br />// Cast the Title <br />$title = new Text('Title');<br />$title-&gt;setValue($item-&gt;get_title());<br />// Cast the description and strip<br />$desc = new Text('Description');<br />$desc-&gt;setValue($this-&gt;trunc(strip_tags($item-&gt;get_description()), 40));<br />$output-&gt;push(new ArrayData(array( <br />'Title' =&gt; $title, <br />'Date' =&gt; $date, <br />'Link' =&gt; $item-&gt;get_link(), <br />'Description' =&gt; $desc <br />)));<br />}<br />return $output;<br />}}</pre><p>The observant reader will notice, however, that I've  changed the number in the parameters of the get_items() call. This  change cuts it off at one entry. If you want more entries displayed,  simply change the second number to the number of your choice.  I've also added a small line of code just after getting the description:   $desc-&gt;setValue($this-&gt;trunc(strip_tags($item-&gt;get_description()),  40));  This line of code calls the truncate function, which needs to be added  in above the LatestNews() function (otherwise, you get errors because  PHP tries to call the function before it's been loaded).</p><pre class="brush: php;fontsize: 100; first-line: 1; ">function trunc($phrase, $max_words){<br />&nbsp;$phrase_array = explode(' ',$phrase);<br />&nbsp;if(count($phrase_array) &gt; $max_words &amp;&amp; $max_words &gt; 0){<br />&nbsp;$phrase = implode(' ',array_slice($phrase_array, 0, $max_words)).'...';<br />&nbsp;}<br />&nbsp;return $phrase;<br />&nbsp;}</pre><p>I found this wonderful little piece of code at <a href="http://snippets.dzone.com/posts/show/412">DZone</a>. The  beauty of this function is that it's small and truncates by words,  instead of characters. This way, our snippet isn't cut off mid-word  (which could have some...interesting unforeseen consequences). It also  appends an ellipsis at the end of the truncated message, which is useful  at providing a visual indication that the article continues.  Next, we have to reference our new function in our template. This is as  simple as adding a few lines of template code, such as the following:</p><pre class="brush: xml;fontsize: 100; first-line: 1; ">&lt;% control LatestNews %&gt;<br />&lt;span id="blogTitle"&gt;$Title&lt;/span&gt;<br />&lt;span id="date"&gt;$Date&lt;/span&gt;<br />$Description &lt;a href="$Link"&gt;Read More&lt;/a&gt;<br />&lt;% end_control %&gt; </pre><p>For those unfamiliar with custom controls  (considering it's one of the areas that is somewhat lacking in the  documentation), you'll see that the control is named the same as the  function in the controller. This gives us access to its internal  variables, which we can use to display our feed output. This is  important, since you'll noticed that $Title, which is also a  SilverStripe core variable, is used.  If you go back to your PHP code, you'll see the list of variables we've  opened to the template:</p><pre class="brush: php;fontsize: 100; first-line: 1; ">$output-&gt;push(new ArrayData(array(<br />'Title' =&gt; $title,<br />'Date' =&gt; $date,<br />'Link' =&gt; $item-&gt;get_link(),<br />'Description' =&gt; $desc<br />))); }<br />return $output;</pre><p>Make note that the list on the left  are the names to use in the template (lacking this piece of knowledge  caused me a moment of confusion over why my $Desc variable wasn't  displaying the blog snippet). Other than that, if you need other pieces  of information extracted from your blog, don't forget to add it to this  list.  Back to the template code, $Link returns the raw URL, which means it's  generally best to wrap in an &lt;a href=&gt; tag, such as how I have it,  above.  From there, format it how you want, using CSS and HTML tags, and voila!  You now have yourself a snippet from an external blog in your non-blog  site!</p></div>

]]></content>
  </entry>
  
</feed>
